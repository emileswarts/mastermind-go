package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestScoreWhenCPUNotSet(t *testing.T) {
	var expectedResult []string

	occupiedCells := []cell{}
	board := generateBoard(occupiedCells)
	expectedResult = scoreRow(board, 12)

	assert.Equal(t, expectedResult[4], "CPU row not set")
}

func TestWinningScore(t *testing.T) {
	var expectedResult []string

	occupiedCells := []cell{
		{0, 0, "ðŸŸ¢"},
		{1, 0, "âšª"},
		{2, 0, "ðŸŸ¤"},
		{3, 0, "ðŸ”µ"},
		{4, 0, "âš«"},

		{0, 12, "ðŸŸ¢"},
		{1, 12, "âšª"},
		{2, 12, "ðŸŸ¤"},
		{3, 12, "ðŸ”µ"},
		{4, 12, "âš«"},
	}
	board := generateBoard(occupiedCells)
	expectedResult = scoreRow(board, 12)

	assert.Equal(t, expectedResult[0], "â¬›")
	assert.Equal(t, expectedResult[1], "â¬›")
	assert.Equal(t, expectedResult[2], "â¬›")
	assert.Equal(t, expectedResult[3], "â¬›")
	assert.Equal(t, expectedResult[4], "â¬›")
}

func TestRightColoursWrongPlacementScore(t *testing.T) {
	var expectedResult []string

	occupiedCells := []cell{
		{0, 0, "ðŸŸ¢"},
		{1, 0, "âšª"},
		{2, 0, "ðŸŸ¤"},
		{3, 0, "ðŸ”µ"},
		{4, 0, "âš«"},
		{0, 12, "âš«"},
		{1, 12, "ðŸŸ¢"},
		{2, 12, "ðŸ”µ"},
		{3, 12, "âšª"},
		{4, 12, "ðŸŸ¤"},
	}
	board := generateBoard(occupiedCells)
	expectedResult = scoreRow(board, 12)

	assert.Equal(t, "â¬œ", expectedResult[0])
	assert.Equal(t, "â¬œ", expectedResult[1])
	assert.Equal(t, "â¬œ", expectedResult[2])
	assert.Equal(t, "â¬œ", expectedResult[3])
	assert.Equal(t, "â¬œ", expectedResult[4])
}

func TestMixRightColourAndPositionScore(t *testing.T) {
	var score []string

	occupiedCells := []cell{
		{0, 0, "ðŸŸ¢"}, //black
		{1, 0, "âšª"}, //white
		{2, 0, "ðŸŸ¤"}, // white
		{3, 0, "ðŸ”µ"}, // white
		{4, 0, "âš«"}, // nothing

		{0, 12, "ðŸŸ¢"},
		{1, 12, "ðŸŸ¡"},
		{2, 12, "ðŸ”µ"},
		{3, 12, "âšª"},
		{4, 12, "ðŸŸ¤"},
	}
	board := generateBoard(occupiedCells)
	score = scoreRow(board, 12)

	assert.Equal(t, "", score[0])
	assert.Equal(t, "â¬›", score[1])
	assert.Equal(t, "â¬œ", score[2])
	assert.Equal(t, "â¬œ", score[3])
	assert.Equal(t, "â¬œ", score[4])
}

func TestNoScore(t *testing.T) {
	var score []string

	occupiedCells := []cell{
		{0, 0, "ðŸŸ¢"}, // nothing
		{1, 0, "âšª"}, // nothing
		{2, 0, "ðŸŸ¤"}, // nothing
		{3, 0, "ðŸ”µ"}, // nothing
		{4, 0, "âš«"}, // nothing

		{0, 12, "ðŸŸ¡"},
		{1, 12, "ðŸŸ¡"},
		{2, 12, "ðŸŸ¡"},
		{3, 12, "ðŸŸ¡"},
		{4, 12, "ðŸŸ¡"},
	}
	board := generateBoard(occupiedCells)
	score = scoreRow(board, 12)

	assert.Equal(t, "", score[0])
	assert.Equal(t, "", score[1])
	assert.Equal(t, "", score[2])
	assert.Equal(t, "", score[3])
	assert.Equal(t, "", score[4])
}

func TestCheckWinner(t *testing.T) {
	rowScores := []string{"â¬›", "â¬›", "â¬›", "â¬›", "â¬›"}

	result := checkWinner(rowScores)
	assert.Equal(t, result, true)
}
